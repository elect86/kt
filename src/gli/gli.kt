package gli

import gli.Cap.*
import gli.Swizzle.*
import gli.Format.Companion.FORMAT_COUNT
import main.vec._2.Vec2i
import main.vec._3.Vec3i

/**
 * Created by elect on 09/10/16.
 */


infix fun Int.and(cap: Cap) = this and cap.i

infix fun Int.or(cap: Cap) = this or cap.i
infix fun Int.has(cap: Cap) = (this and cap) != 0
infix fun Int.has(b: Int) = (this and b) != 0
fun Vec3i.levels() = (Math.log(compMul().toDouble()) / Math.log(2.0) + 1).toInt()
fun Vec2i.levels() = (Math.log(compMul().toDouble()) / Math.log(2.0) + 1).toInt()

enum class Format {

    FORMAT_INVALID(-1),

    FORMAT_UNDEFINED(0),

    FORMAT_RG4_UNORM_PACK8,
    FORMAT_RGBA4_UNORM_PACK16,
    FORMAT_BGRA4_UNORM_PACK16,
    FORMAT_R5G6B5_UNORM_PACK16,
    FORMAT_B5G6R5_UNORM_PACK16,
    FORMAT_RGB5A1_UNORM_PACK16,
    FORMAT_BGR5A1_UNORM_PACK16,
    FORMAT_A1RGB5_UNORM_PACK16,

    FORMAT_R8_UNORM_PACK8,
    FORMAT_R8_SNORM_PACK8,
    FORMAT_R8_USCALED_PACK8,
    FORMAT_R8_SSCALED_PACK8,
    FORMAT_R8_UINT_PACK8,
    FORMAT_R8_SINT_PACK8,
    FORMAT_R8_SRGB_PACK8,

    FORMAT_RG8_UNORM_PACK8,
    FORMAT_RG8_SNORM_PACK8,
    FORMAT_RG8_USCALED_PACK8,
    FORMAT_RG8_SSCALED_PACK8,
    FORMAT_RG8_UINT_PACK8,
    FORMAT_RG8_SINT_PACK8,
    FORMAT_RG8_SRGB_PACK8,

    FORMAT_RGB8_UNORM_PACK8,
    FORMAT_RGB8_SNORM_PACK8,
    FORMAT_RGB8_USCALED_PACK8,
    FORMAT_RGB8_SSCALED_PACK8,
    FORMAT_RGB8_UINT_PACK8,
    FORMAT_RGB8_SINT_PACK8,
    FORMAT_RGB8_SRGB_PACK8,

    FORMAT_BGR8_UNORM_PACK8,
    FORMAT_BGR8_SNORM_PACK8,
    FORMAT_BGR8_USCALED_PACK8,
    FORMAT_BGR8_SSCALED_PACK8,
    FORMAT_BGR8_UINT_PACK8,
    FORMAT_BGR8_SINT_PACK8,
    FORMAT_BGR8_SRGB_PACK8,

    FORMAT_RGBA8_UNORM_PACK8,
    FORMAT_RGBA8_SNORM_PACK8,
    FORMAT_RGBA8_USCALED_PACK8,
    FORMAT_RGBA8_SSCALED_PACK8,
    FORMAT_RGBA8_UINT_PACK8,
    FORMAT_RGBA8_SINT_PACK8,
    FORMAT_RGBA8_SRGB_PACK8,

    FORMAT_BGRA8_UNORM_PACK8,
    FORMAT_BGRA8_SNORM_PACK8,
    FORMAT_BGRA8_USCALED_PACK8,
    FORMAT_BGRA8_SSCALED_PACK8,
    FORMAT_BGRA8_UINT_PACK8,
    FORMAT_BGRA8_SINT_PACK8,
    FORMAT_BGRA8_SRGB_PACK8,

    FORMAT_RGBA8_UNORM_PACK32,
    FORMAT_RGBA8_SNORM_PACK32,
    FORMAT_RGBA8_USCALED_PACK32,
    FORMAT_RGBA8_SSCALED_PACK32,
    FORMAT_RGBA8_UINT_PACK32,
    FORMAT_RGBA8_SINT_PACK32,
    FORMAT_RGBA8_SRGB_PACK32,

    FORMAT_RGB10A2_UNORM_PACK32,
    FORMAT_RGB10A2_SNORM_PACK32,
    FORMAT_RGB10A2_USCALED_PACK32,
    FORMAT_RGB10A2_SSCALED_PACK32,
    FORMAT_RGB10A2_UINT_PACK32,
    FORMAT_RGB10A2_SINT_PACK32,

    FORMAT_BGR10A2_UNORM_PACK32,
    FORMAT_BGR10A2_SNORM_PACK32,
    FORMAT_BGR10A2_USCALED_PACK32,
    FORMAT_BGR10A2_SSCALED_PACK32,
    FORMAT_BGR10A2_UINT_PACK32,
    FORMAT_BGR10A2_SINT_PACK32,

    FORMAT_R16_UNORM_PACK16,
    FORMAT_R16_SNORM_PACK16,
    FORMAT_R16_USCALED_PACK16,
    FORMAT_R16_SSCALED_PACK16,
    FORMAT_R16_UINT_PACK16,
    FORMAT_R16_SINT_PACK16,
    FORMAT_R16_SFLOAT_PACK16,

    FORMAT_RG16_UNORM_PACK16,
    FORMAT_RG16_SNORM_PACK16,
    FORMAT_RG16_USCALED_PACK16,
    FORMAT_RG16_SSCALED_PACK16,
    FORMAT_RG16_UINT_PACK16,
    FORMAT_RG16_SINT_PACK16,
    FORMAT_RG16_SFLOAT_PACK16,

    FORMAT_RGB16_UNORM_PACK16,
    FORMAT_RGB16_SNORM_PACK16,
    FORMAT_RGB16_USCALED_PACK16,
    FORMAT_RGB16_SSCALED_PACK16,
    FORMAT_RGB16_UINT_PACK16,
    FORMAT_RGB16_SINT_PACK16,
    FORMAT_RGB16_SFLOAT_PACK16,

    FORMAT_RGBA16_UNORM_PACK16,
    FORMAT_RGBA16_SNORM_PACK16,
    FORMAT_RGBA16_USCALED_PACK16,
    FORMAT_RGBA16_SSCALED_PACK16,
    FORMAT_RGBA16_UINT_PACK16,
    FORMAT_RGBA16_SINT_PACK16,
    FORMAT_RGBA16_SFLOAT_PACK16,

    FORMAT_R32_UINT_PACK32,
    FORMAT_R32_SINT_PACK32,
    FORMAT_R32_SFLOAT_PACK32,

    FORMAT_RG32_UINT_PACK32,
    FORMAT_RG32_SINT_PACK32,
    FORMAT_RG32_SFLOAT_PACK32,

    FORMAT_RGB32_UINT_PACK32,
    FORMAT_RGB32_SINT_PACK32,
    FORMAT_RGB32_SFLOAT_PACK32,

    FORMAT_RGBA32_UINT_PACK32,
    FORMAT_RGBA32_SINT_PACK32,
    FORMAT_RGBA32_SFLOAT_PACK32,

    FORMAT_R64_UINT_PACK64,
    FORMAT_R64_SINT_PACK64,
    FORMAT_R64_SFLOAT_PACK64,

    FORMAT_RG64_UINT_PACK64,
    FORMAT_RG64_SINT_PACK64,
    FORMAT_RG64_SFLOAT_PACK64,

    FORMAT_RGB64_UINT_PACK64,
    FORMAT_RGB64_SINT_PACK64,
    FORMAT_RGB64_SFLOAT_PACK64,

    FORMAT_RGBA64_UINT_PACK64,
    FORMAT_RGBA64_SINT_PACK64,
    FORMAT_RGBA64_SFLOAT_PACK64,

    FORMAT_RG11B10_UFLOAT_PACK32,
    FORMAT_RGB9E5_UFLOAT_PACK32,

    FORMAT_D16_UNORM_PACK16,
    FORMAT_D24_UNORM_PACK32,
    FORMAT_D32_SFLOAT_PACK32,
    FORMAT_S8_UINT_PACK8,
    FORMAT_D16_UNORM_S8_UINT_PACK32,
    FORMAT_D24_UNORM_S8_UINT_PACK32,
    FORMAT_D32_SFLOAT_S8_UINT_PACK64,

    FORMAT_RGB_DXT1_UNORM_BLOCK8,
    FORMAT_RGB_DXT1_SRGB_BLOCK8,
    FORMAT_RGBA_DXT1_UNORM_BLOCK8,
    FORMAT_RGBA_DXT1_SRGB_BLOCK8,
    FORMAT_RGBA_DXT3_UNORM_BLOCK16,
    FORMAT_RGBA_DXT3_SRGB_BLOCK16,
    FORMAT_RGBA_DXT5_UNORM_BLOCK16,
    FORMAT_RGBA_DXT5_SRGB_BLOCK16,
    FORMAT_R_ATI1N_UNORM_BLOCK8,
    FORMAT_R_ATI1N_SNORM_BLOCK8,
    FORMAT_RG_ATI2N_UNORM_BLOCK16,
    FORMAT_RG_ATI2N_SNORM_BLOCK16,
    FORMAT_RGB_BP_UFLOAT_BLOCK16,
    FORMAT_RGB_BP_SFLOAT_BLOCK16,
    FORMAT_RGBA_BP_UNORM_BLOCK16,
    FORMAT_RGBA_BP_SRGB_BLOCK16,

    FORMAT_RGB_ETC2_UNORM_BLOCK8,
    FORMAT_RGB_ETC2_SRGB_BLOCK8,
    FORMAT_RGBA_ETC2_UNORM_BLOCK8,
    FORMAT_RGBA_ETC2_SRGB_BLOCK8,
    FORMAT_RGBA_ETC2_UNORM_BLOCK16,
    FORMAT_RGBA_ETC2_SRGB_BLOCK16,
    FORMAT_R_EAC_UNORM_BLOCK8,
    FORMAT_R_EAC_SNORM_BLOCK8,
    FORMAT_RG_EAC_UNORM_BLOCK16,
    FORMAT_RG_EAC_SNORM_BLOCK16,

    FORMAT_RGBA_ASTC_4X4_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_4X4_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_5X4_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_5X4_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_5X5_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_5X5_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_6X5_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_6X5_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_6X6_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_6X6_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_8X5_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_8X5_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_8X6_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_8X6_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_8X8_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_8X8_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_10X5_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_10X5_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_10X6_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_10X6_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_10X8_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_10X8_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_10X10_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_10X10_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_12X10_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_12X10_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_12X12_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_12X12_SRGB_BLOCK16,

    FORMAT_RGB_PVRTC1_8X8_UNORM_BLOCK32,
    FORMAT_RGB_PVRTC1_8X8_SRGB_BLOCK32,
    FORMAT_RGB_PVRTC1_16X8_UNORM_BLOCK32,
    FORMAT_RGB_PVRTC1_16X8_SRGB_BLOCK32,
    FORMAT_RGBA_PVRTC1_8X8_UNORM_BLOCK32,
    FORMAT_RGBA_PVRTC1_8X8_SRGB_BLOCK32,
    FORMAT_RGBA_PVRTC1_16X8_UNORM_BLOCK32,
    FORMAT_RGBA_PVRTC1_16X8_SRGB_BLOCK32,
    FORMAT_RGBA_PVRTC2_4X4_UNORM_BLOCK8,
    FORMAT_RGBA_PVRTC2_4X4_SRGB_BLOCK8,
    FORMAT_RGBA_PVRTC2_8X4_UNORM_BLOCK8,
    FORMAT_RGBA_PVRTC2_8X4_SRGB_BLOCK8,

    FORMAT_RGB_ETC_UNORM_BLOCK8,
    FORMAT_RGB_ATC_UNORM_BLOCK8,
    FORMAT_RGBA_ATCA_UNORM_BLOCK16,
    FORMAT_RGBA_ATCI_UNORM_BLOCK16,

    FORMAT_L8_UNORM_PACK8,
    FORMAT_A8_UNORM_PACK8,
    FORMAT_LA8_UNORM_PACK8,
    FORMAT_L16_UNORM_PACK16,
    FORMAT_A16_UNORM_PACK16,
    FORMAT_LA16_UNORM_PACK16,

    FORMAT_BGR8_UNORM_PACK32,
    FORMAT_BGR8_SRGB_PACK32,

    FORMAT_RG3B2_UNORM_PACK8;

    val i: Int

    constructor() {
        i = ordinal
    }

    constructor(i: Int) {
        this.i = i
    }

    operator fun plus(other: Format) = i + other.i
    operator fun minus(other: Format) = i - other.i

    companion object {
        val FORMAT_FIRST = FORMAT_RG4_UNORM_PACK8
        val FORMAT_LAST = FORMAT_RG3B2_UNORM_PACK8
        val FORMAT_COUNT = FORMAT_LAST - FORMAT_FIRST + 1
    }

    fun isValid() = this >= FORMAT_FIRST && this <= FORMAT_LAST

    fun getFormatInfo(): FormatInfo {
        assert(this >= FORMAT_FIRST && this <= FORMAT_LAST)
        return table[this - FORMAT_FIRST]
    }

    fun bitsPerPixel(): Int {
        var info = getFormatInfo()
        return info.blockSize * 8 / (info.blockExtent.x * info.blockExtent.y * info.blockExtent.z)
    }

    fun isCompress() = getFormatInfo().flags has CAP_COMPRESSED_BIT

    fun isSrgb() = getFormatInfo().flags has CAP_COLORSPACE_SRGB_BIT

    fun blockSize() = getFormatInfo().blockSize
    fun blockExtent() = Vec3i(getFormatInfo().blockExtent)
    fun componentCount() = getFormatInfo().component

    fun isUnsigned() = getFormatInfo().flags has CAP_UNSIGNED_BIT
    fun isSigned() = getFormatInfo().flags has CAP_SIGNED_BIT

    fun isInteger() = getFormatInfo().flags has CAP_INTEGER_BIT
    fun isSignedInteger() = isInteger() && isUnsigned()
    fun isUnsignedInteger() = isInteger() && isUnsigned()

    fun isFloat() = getFormatInfo().flags has CAP_FLOAT_BIT

    fun isNormalized() = getFormatInfo().flags has CAP_NORMALIZED_BIT

    fun isUnorm() = isNormalized() && isUnsigned()
    fun isSnorm() = isNormalized() && isSigned()

    fun isPacked(): Boolean {
        val flags = getFormatInfo().flags.toInt()
        return flags has CAP_PACKED8_BIT || flags has CAP_PACKED16_BIT || flags has CAP_PACKED32_BIT
    }


    operator fun rangeTo(other: Format) = FormatRange(this, other)

    class FormatRange(override val start: Format, override val endInclusive: Format) : ClosedRange<Format>, Iterable<Format> {
        override fun iterator() = FormatIterator(this)
        override fun contains(value: Format) = start.i <= value.i && value.i <= endInclusive.i
    }

    class FormatIterator(val formatRange: FormatRange) : Iterator<Format> {
        var current = formatRange.start
        override fun next() = Format.values().first { it.i == (current.i + 1) }
        override fun hasNext(): Boolean = current.i <= formatRange.endInclusive.i
    }
}

enum class Target {

    TARGET_INVALID(-1),
    TARGET_1D,
    TARGET_1D_ARRAY,
    TARGET_2D,
    TARGET_2D_ARRAY,
    TARGET_3D,
    TARGET_RECT,
    TARGET_RECT_ARRAY,
    TARGET_CUBE,
    TARGET_CUBE_ARRAY;

    val i: Int

    constructor() {
        i = ordinal
    }

    constructor(i: Int) {
        this.i = i
    }

    operator fun plus(other: Target) = i + other.i
    operator fun minus(other: Target) = i - other.i

    companion object {
        val TARGET_FIRST = TARGET_1D
        val TARGET_LAST = TARGET_CUBE_ARRAY
        val TARGET_COUNT = TARGET_LAST - TARGET_FIRST + 1
    }

    fun isTarget1d() = this == TARGET_1D || this == TARGET_1D_ARRAY

    fun isTargetArray() = this == TARGET_1D || this == TARGET_2D || this == TARGET_3D

    fun isTargetCube() = this == TARGET_CUBE || this == TARGET_CUBE_ARRAY

    fun isTargetRect() = this == TARGET_RECT || this == TARGET_RECT_ARRAY
}

enum class Swizzle {

    SWIZZLE_RED,
    SWIZZLE_GREEN,
    SWIZZLE_BLUE,
    SWIZZLE_ALPHA,
    SWIZZLE_ZERO,
    SWIZZLE_ONE;

    val i = ordinal

    operator fun minus(other: Swizzle) = i - other.i
    operator fun plus(other: Int) = i + other

    companion object {
        val SWIZZLE_FIRST = SWIZZLE_RED
        val SWIZZLE_CHANNEL_FIRST = SWIZZLE_RED
        val SWIZZLE_CHANNEL_LAST = SWIZZLE_ALPHA
        val SWIZZLE_LAST = SWIZZLE_ONE
        val SWIZZLE_COUNT = SWIZZLE_LAST - SWIZZLE_FIRST + 1
    }

    fun isChannel() = this >= SWIZZLE_CHANNEL_FIRST && this <= SWIZZLE_CHANNEL_LAST
}

class Swizzles(val r: Swizzle, val g: Swizzle, val b: Swizzle, val a: Swizzle) {

    constructor(s: Swizzle) : this(s, s, s, s)
}

enum class Cap(val i: Int) {

    CAP_COMPRESSED_BIT(1 shl 0),
    CAP_COLORSPACE_SRGB_BIT(1 shl 1),
    CAP_NORMALIZED_BIT(1 shl 2),
    CAP_SCALED_BIT(1 shl 3),
    CAP_UNSIGNED_BIT(1 shl 4),
    CAP_SIGNED_BIT(1 shl 5),
    CAP_INTEGER_BIT(1 shl 6),
    CAP_FLOAT_BIT(1 shl 7),
    CAP_DEPTH_BIT(1 shl 8),
    CAP_STENCIL_BIT(1 shl 9),
    CAP_SWIZZLE_BIT(1 shl 10),
    CAP_LUMINANCE_ALPHA_BIT(1 shl 11),
    CAP_PACKED8_BIT(1 shl 12),
    CAP_PACKED16_BIT(1 shl 13),
    CAP_PACKED32_BIT(1 shl 14),
    CAP_DDS_GLI_EXT_BIT(1 shl 15);

    operator fun plus(cap: Cap) = i + cap.i
    operator fun plus(int: Int) = i + int
    operator fun minus(cap: Cap) = i - cap.i
    operator fun minus(int: Int) = i - int
    operator fun times(cap: Cap) = i * cap.i
    operator fun times(int: Int) = i * int
    operator fun div(cap: Cap) = i / cap.i
    operator fun div(int: Int) = i / int
    operator fun mod(cap: Cap) = i % cap.i
    operator fun mod(int: Int) = i % int
    infix fun and(cap: Cap) = i and cap.i
    infix fun and(int: Int) = i and int
    infix fun or(cap: Cap) = i or cap.i
    infix fun or(int: Int) = i or int
}

class FormatInfo(val blockSize: Int, val blockExtent: Vec3i, val component: Int, val swizzles: Swizzles, val flags: Int)

val table: Array<FormatInfo> by lazy {
    val t = arrayOf(
            FormatInfo(1, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_PACKED8_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_R4G4_UNORM,
            FormatInfo(2, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_PACKED16_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA4_UNORM,
            FormatInfo(2, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_PACKED16_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_BGRA4_UNORM,
            FormatInfo(2, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_PACKED16_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_R5G6B5_UNORM,
            FormatInfo(2, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ONE), CAP_PACKED16_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_B5G6R5_UNORM,
            FormatInfo(2, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_PACKED16_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB5A1_UNORM,
            FormatInfo(2, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_PACKED16_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_BGR5A1_UNORM,
            FormatInfo(2, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_ALPHA, SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE), CAP_PACKED16_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_A1RGB5_UNORM,

            FormatInfo(1, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_R8_UNORM,
            FormatInfo(1, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_SIGNED_BIT), //FORMAT_R8_SNORM,
            FormatInfo(1, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_SCALED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_R8_USCALED,
            FormatInfo(1, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_SCALED_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_R8_SSCALED,
            FormatInfo(1, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_UNSIGNED_BIT), //FORMAT_R8_UINT,
            FormatInfo(1, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_SIGNED_BIT), //FORMAT_R8_SINT,
            FormatInfo(1, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_R8_SRGB,

            FormatInfo(2, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RG8_UNORM,
            FormatInfo(2, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_SIGNED_BIT), //FORMAT_RG8_SNORM,
            FormatInfo(2, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_SCALED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RG8_USCALED,
            FormatInfo(2, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_SCALED_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RG8_SSCALED,
            FormatInfo(2, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_UNSIGNED_BIT), //FORMAT_RG8_UINT,
            FormatInfo(2, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_SIGNED_BIT), //FORMAT_RG8_SINT,
            FormatInfo(2, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_SIGNED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RG8_SRGB,

            FormatInfo(3, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB8_UNORM,
            FormatInfo(3, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB8_SNORM,
            FormatInfo(3, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_SCALED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB8_USCALED,
            FormatInfo(3, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_SCALED_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB8_SSCALED,
            FormatInfo(3, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB8_UINT,
            FormatInfo(3, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB8_SINT,
            FormatInfo(3, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB8_SRGB,

            FormatInfo(3, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_SWIZZLE_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR8_UNORM,
            FormatInfo(3, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_SIGNED_BIT or CAP_SWIZZLE_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR8_SNORM,
            FormatInfo(3, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ONE), CAP_SCALED_BIT or CAP_UNSIGNED_BIT or CAP_SWIZZLE_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR8_USCALED,
            FormatInfo(3, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ONE), CAP_SCALED_BIT or CAP_SIGNED_BIT or CAP_SWIZZLE_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR8_SSCALED,
            FormatInfo(3, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_UNSIGNED_BIT or CAP_SWIZZLE_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR8_UINT,
            FormatInfo(3, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_SIGNED_BIT or CAP_SWIZZLE_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR8_SINT,
            FormatInfo(3, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_SWIZZLE_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR8_SRGB,

            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA8_UNORM,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT or CAP_SIGNED_BIT), //FORMAT_RGBA8_SNORM,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_SCALED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA8_USCALED,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_SCALED_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA8_SSCALED,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_INTEGER_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA8_UINT,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_INTEGER_BIT or CAP_SIGNED_BIT), //FORMAT_RGBA8_SINT,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_COLORSPACE_SRGB_BIT), //FORMAT_RGBA8_SRGB,

            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_SWIZZLE_BIT), //FORMAT_BGRA8_UNORM,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT or CAP_SIGNED_BIT or CAP_SWIZZLE_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_BGRA8_SNORM,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_SCALED_BIT or CAP_UNSIGNED_BIT or CAP_SWIZZLE_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_BGRA8_USCALED,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_SCALED_BIT or CAP_SIGNED_BIT or CAP_SWIZZLE_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_BGRA8_SSCALED,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_INTEGER_BIT or CAP_UNSIGNED_BIT or CAP_SWIZZLE_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_BGRA8_UINT,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_INTEGER_BIT or CAP_SIGNED_BIT or CAP_SWIZZLE_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_BGRA8_SINT,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_SWIZZLE_BIT), //FORMAT_BGRA8_SRGB,

            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_SWIZZLE_BIT or CAP_PACKED32_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA8_UNORM_PACK32,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT or CAP_SIGNED_BIT or CAP_SWIZZLE_BIT or CAP_PACKED32_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA8_SNORM_PACK32,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_SCALED_BIT or CAP_UNSIGNED_BIT or CAP_SWIZZLE_BIT or CAP_PACKED32_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA8_USCALED_PACK32,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_SCALED_BIT or CAP_SIGNED_BIT or CAP_SWIZZLE_BIT or CAP_PACKED32_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA8_SSCALED_PACK32,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_INTEGER_BIT or CAP_UNSIGNED_BIT or CAP_SWIZZLE_BIT or CAP_PACKED32_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA8_UINT_PACK32,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_INTEGER_BIT or CAP_SIGNED_BIT or CAP_SWIZZLE_BIT or CAP_PACKED32_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA8_SINT_PACK32,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_SWIZZLE_BIT or CAP_PACKED32_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA8_SRGB_PACK32,

            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_PACKED32_BIT), //FORMAT_RGB10A2_UNORM,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT or CAP_SIGNED_BIT or CAP_PACKED32_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB10A2_SNORM,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_SCALED_BIT or CAP_UNSIGNED_BIT or CAP_PACKED32_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB10A2_USCALE,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_SCALED_BIT or CAP_SIGNED_BIT or CAP_PACKED32_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB10A2_SSCALE,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_INTEGER_BIT or CAP_UNSIGNED_BIT or CAP_PACKED32_BIT), //FORMAT_RGB10A2_UINT,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_INTEGER_BIT or CAP_SIGNED_BIT or CAP_PACKED32_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB10A2_SINT,

            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_PACKED32_BIT or CAP_SWIZZLE_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR10A2_UNORM,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT or CAP_SIGNED_BIT or CAP_PACKED32_BIT or CAP_SWIZZLE_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR10A2_SNORM,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_SCALED_BIT or CAP_UNSIGNED_BIT or CAP_PACKED32_BIT or CAP_SWIZZLE_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR10A2_USCALE,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_SCALED_BIT or CAP_SIGNED_BIT or CAP_PACKED32_BIT or CAP_SWIZZLE_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR10A2_SSCALE,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_INTEGER_BIT or CAP_UNSIGNED_BIT or CAP_PACKED32_BIT or CAP_SWIZZLE_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR10A2_UINT,
            FormatInfo(4, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_INTEGER_BIT or CAP_SIGNED_BIT or CAP_PACKED32_BIT or CAP_SWIZZLE_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR10A2_SINT,

            FormatInfo(2, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_R16_UNORM_PACK16,
            FormatInfo(2, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_SIGNED_BIT), //FORMAT_R16_SNORM_PACK16,
            FormatInfo(2, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_SCALED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_R16_USCALE,
            FormatInfo(2, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_SCALED_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_R16_SSCALE,
            FormatInfo(2, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_UNSIGNED_BIT), //FORMAT_R16_UINT_PACK16,
            FormatInfo(2, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_SIGNED_BIT), //FORMAT_R16_SINT_PACK16,
            FormatInfo(2, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_FLOAT_BIT or CAP_SIGNED_BIT), //FORMAT_R16_SFLOAT_PACK16,

            FormatInfo(4, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RG16_UNORM_PACK16,
            FormatInfo(4, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_SIGNED_BIT), //FORMAT_RG16_SNORM_PACK16,
            FormatInfo(4, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_SCALED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RG16_USCALE,
            FormatInfo(4, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_SCALED_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RG16_SSCALE,
            FormatInfo(4, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_UNSIGNED_BIT), //FORMAT_RG16_UINT_PACK16,
            FormatInfo(4, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_SIGNED_BIT), //FORMAT_RG16_SINT_PACK16,
            FormatInfo(4, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_FLOAT_BIT or CAP_SIGNED_BIT), //FORMAT_RG16_SFLOAT_PACK16,

            FormatInfo(6, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB16_UNORM_PACK16,
            FormatInfo(6, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB16_SNORM_PACK16,
            FormatInfo(6, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_SCALED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB16_USCALE,
            FormatInfo(6, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_SCALED_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB16_SSCALE,
            FormatInfo(6, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB16_UINT_PACK16,
            FormatInfo(6, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB16_SINT_PACK16,
            FormatInfo(6, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_FLOAT_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB16_SFLOAT_PACK16,

            FormatInfo(8, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA16_UNORM_PACK16,
            FormatInfo(8, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT or CAP_SIGNED_BIT), //FORMAT_RGBA16_SNORM_PACK16,
            FormatInfo(8, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_SCALED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA16_USCALE,
            FormatInfo(8, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_SCALED_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA16_SSCALE,
            FormatInfo(8, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_INTEGER_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA16_UINT_PACK16,
            FormatInfo(8, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_INTEGER_BIT or CAP_SIGNED_BIT), //FORMAT_RGBA16_SINT_PACK16,
            FormatInfo(8, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_FLOAT_BIT or CAP_SIGNED_BIT), //FORMAT_RGBA16_SFLOAT_PACK16,

            FormatInfo(4, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_UNSIGNED_BIT), //FORMAT_R32_UINT_PACK32,
            FormatInfo(4, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_SIGNED_BIT), //FORMAT_R32_SINT_PACK32,
            FormatInfo(4, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_FLOAT_BIT or CAP_SIGNED_BIT), //FORMAT_R32_SFLOAT_PACK32,

            FormatInfo(8, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_UNSIGNED_BIT), //FORMAT_RG32_UINT_PACK32,
            FormatInfo(8, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_SIGNED_BIT), //FORMAT_RG32_SINT_PACK32,
            FormatInfo(8, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_FLOAT_BIT or CAP_SIGNED_BIT), //FORMAT_RG32_SFLOAT_PACK32,

            FormatInfo(12, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGB32_UINT_PACK32,
            FormatInfo(12, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_SIGNED_BIT), //FORMAT_RGB32_SINT_PACK32,
            FormatInfo(12, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_FLOAT_BIT or CAP_SIGNED_BIT), //FORMAT_RGB32_SFLOAT_PACK32,

            FormatInfo(16, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_INTEGER_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA32_UINT_PACK32,
            FormatInfo(16, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_INTEGER_BIT or CAP_SIGNED_BIT), //FORMAT_RGBA32_SINT_PACK32,
            FormatInfo(16, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_FLOAT_BIT or CAP_SIGNED_BIT), //FORMAT_RGBA32_SFLOAT_PACK32,

            FormatInfo(8, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_R64_UINT_PACK64,
            FormatInfo(8, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_R64_SINT_PACK64,
            FormatInfo(8, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_FLOAT_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_R64_SFLOAT_PACK64,

            FormatInfo(16, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RG64_UINT_PACK64,
            FormatInfo(16, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RG64_SINT_PACK64,
            FormatInfo(16, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_FLOAT_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RG64_SFLOAT_PACK64,

            FormatInfo(24, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB64_UINT_PACK64,
            FormatInfo(24, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_INTEGER_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB64_SINT_PACK64,
            FormatInfo(24, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_FLOAT_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB64_SFLOAT_PACK64,

            FormatInfo(32, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_INTEGER_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA64_UINT_PACK64,
            FormatInfo(32, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_INTEGER_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA64_SINT_PACK64,
            FormatInfo(32, Vec3i(1, 1, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_FLOAT_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA64_SFLOAT_PACK64,

            FormatInfo(4, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_PACKED32_BIT or CAP_FLOAT_BIT or CAP_SIGNED_BIT), //FORMAT_RG11B10_UFLOAT_PACK32,
            FormatInfo(4, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_PACKED32_BIT or CAP_FLOAT_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGB9E5_UFLOAT_PACK32,

            FormatInfo(2, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_DEPTH_BIT or CAP_INTEGER_BIT), //FORMAT_D16_UNORM_PACK16,
            FormatInfo(4, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_DEPTH_BIT or CAP_INTEGER_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_D24_UNORM_PACK32,
            FormatInfo(4, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_DEPTH_BIT or CAP_FLOAT_BIT), //FORMAT_D32_UFLOAT_PACK32,
            FormatInfo(1, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_DEPTH_BIT or CAP_STENCIL_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_S8_UNORM_PACK8,
            FormatInfo(3, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_DEPTH_BIT or CAP_INTEGER_BIT or CAP_STENCIL_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_D16_UNORM_S8_UINT_PACK32,
            FormatInfo(4, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_DEPTH_BIT or CAP_INTEGER_BIT or CAP_STENCIL_BIT), //FORMAT_D24_UNORM_S8_UINT_PACK32,
            FormatInfo(5, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_DEPTH_BIT or CAP_FLOAT_BIT or CAP_STENCIL_BIT), //FORMAT_D32_SFLOAT_S8_UINT_PACK64,

            FormatInfo(8, Vec3i(4, 4, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB_DXT1_UNORM_BLOCK8,
            FormatInfo(8, Vec3i(4, 4, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB_DXT1_SRGB_BLOCK8,
            FormatInfo(8, Vec3i(4, 4, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_DXT1_UNORM_BLOCK8,
            FormatInfo(8, Vec3i(4, 4, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_DXT1_SRGB_BLOCK8,
            FormatInfo(16, Vec3i(4, 4, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_DXT3_UNORM_BLOCK16,
            FormatInfo(16, Vec3i(4, 4, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_DXT3_SRGB_BLOCK16,
            FormatInfo(16, Vec3i(4, 4, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_DXT5_UNORM_BLOCK16,
            FormatInfo(16, Vec3i(4, 4, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_DXT5_SRGB_BLOCK16,
            FormatInfo(8, Vec3i(4, 4, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_R_ATI1N_UNORM_BLOCK8,
            FormatInfo(8, Vec3i(4, 4, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_SIGNED_BIT), //FORMAT_R_ATI1N_SNORM_BLOCK8,
            FormatInfo(16, Vec3i(4, 4, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RG_ATI2N_UNORM_BLOCK16,
            FormatInfo(16, Vec3i(4, 4, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_SIGNED_BIT), //FORMAT_RG_ATI2N_SNORM_BLOCK16,
            FormatInfo(16, Vec3i(4, 4, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT or CAP_FLOAT_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGB_BP_UFLOAT_BLOCK16,
            FormatInfo(16, Vec3i(4, 4, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT or CAP_FLOAT_BIT or CAP_SIGNED_BIT), //FORMAT_RGB_BP_SFLOAT_BLOCK16,
            FormatInfo(16, Vec3i(4, 4, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_BP_UNORM_BLOCK16,
            FormatInfo(16, Vec3i(4, 4, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_BP_SRGB_BLOCK16,

            FormatInfo(8, Vec3i(4, 4, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB_ETC2_UNORM_BLOCK8,
            FormatInfo(8, Vec3i(4, 4, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB_ETC2_SRGB_BLOCK8,
            FormatInfo(8, Vec3i(4, 4, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_ETC2_UNORM_BLOCK8,
            FormatInfo(8, Vec3i(4, 4, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_ETC2_SRGB_BLOCK8,
            FormatInfo(16, Vec3i(4, 4, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_ETC2_UNORM_BLOCK16,
            FormatInfo(16, Vec3i(4, 4, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_ETC2_SRGB_BLOCK16,
            FormatInfo(8, Vec3i(4, 4, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_R_EAC_UNORM_BLOCK8,
            FormatInfo(8, Vec3i(4, 4, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_R_EAC_SNORM_BLOCK8,
            FormatInfo(16, Vec3i(4, 4, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RG_EAC_UNORM_BLOCK16,
            FormatInfo(16, Vec3i(4, 4, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_SIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RG_EAC_SNORM_BLOCK16,

            FormatInfo(16, Vec3i(4, 4, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_4X4_UNORM_BLOCK16,
            FormatInfo(16, Vec3i(4, 4, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_4X4_SRGB_BLOCK16,
            FormatInfo(16, Vec3i(5, 4, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_5X4_UNORM_BLOCK16,
            FormatInfo(16, Vec3i(5, 4, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_5X4_SRGB_BLOCK16,
            FormatInfo(16, Vec3i(5, 5, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_5X5_UNORM_BLOCK16,
            FormatInfo(16, Vec3i(5, 5, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_5X5_SRGB_BLOCK16,
            FormatInfo(16, Vec3i(6, 5, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_6X5_UNORM_BLOCK16,
            FormatInfo(16, Vec3i(6, 5, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_6X5_SRGB_BLOCK16,
            FormatInfo(16, Vec3i(6, 6, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_6X6_UNORM_BLOCK16,
            FormatInfo(16, Vec3i(6, 6, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_6X6_SRGB_BLOCK16,
            FormatInfo(16, Vec3i(8, 5, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_8X5_UNORM_BLOCK16,
            FormatInfo(16, Vec3i(8, 5, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_8X5_SRGB_BLOCK16,
            FormatInfo(16, Vec3i(8, 6, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_8X6_UNORM_BLOCK16,
            FormatInfo(16, Vec3i(8, 6, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_8X6_SRGB_BLOCK16,
            FormatInfo(16, Vec3i(8, 8, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_8X8_UNORM_BLOCK16,
            FormatInfo(16, Vec3i(8, 8, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_8X8_SRGB_BLOCK16,
            FormatInfo(16, Vec3i(10, 5, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_10X5_UNORM_BLOCK16,
            FormatInfo(16, Vec3i(10, 5, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_10X5_SRGB_BLOCK16,
            FormatInfo(16, Vec3i(10, 6, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_10X6_UNORM_BLOCK16,
            FormatInfo(16, Vec3i(10, 6, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_10X6_SRGB_BLOCK16,
            FormatInfo(16, Vec3i(10, 8, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_10X8_UNORM_BLOCK16,
            FormatInfo(16, Vec3i(10, 8, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_10X8_SRGB_BLOCK16,
            FormatInfo(16, Vec3i(10, 10, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_10X10_UNORM_BLOCK16,
            FormatInfo(16, Vec3i(10, 10, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_10X10_SRGB_BLOCK16,
            FormatInfo(16, Vec3i(12, 10, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_12X10_UNORM_BLOCK16,
            FormatInfo(16, Vec3i(12, 10, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_12X10_SRGB_BLOCK16,
            FormatInfo(16, Vec3i(12, 12, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_12X12_UNORM_BLOCK16,
            FormatInfo(16, Vec3i(12, 12, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC_12X12_SRGB_BLOCK16,

            FormatInfo(32, Vec3i(8, 8, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB_PVRTC1_8X8_UNORM_BLOCK32,
            FormatInfo(32, Vec3i(8, 8, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB_PVRTC1_8X8_SRGB_BLOCK32,
            FormatInfo(32, Vec3i(16, 8, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB_PVRTC1_16X8_UNORM_BLOCK32,
            FormatInfo(32, Vec3i(16, 8, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB_PVRTC1_16X8_SRGB_BLOCK32,
            FormatInfo(32, Vec3i(8, 8, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_PVRTC1_8X8_UNORM_BLOCK32,
            FormatInfo(32, Vec3i(8, 8, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_PVRTC1_8X8_SRGB_BLOCK32,
            FormatInfo(32, Vec3i(16, 8, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_PVRTC1_16X8_UNORM_BLOCK32,
            FormatInfo(32, Vec3i(16, 8, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_PVRTC1_16X8_SRGB_BLOCK32,
            FormatInfo(8, Vec3i(4, 4, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_PVRTC2_4X4_UNORM_BLOCK8,
            FormatInfo(8, Vec3i(4, 4, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_PVRTC2_4X4_SRGB_BLOCK8,
            FormatInfo(8, Vec3i(8, 4, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_PVRTC2_8X4_UNORM_BLOCK8,
            FormatInfo(8, Vec3i(8, 4, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_COLORSPACE_SRGB_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_PVRTC2_8X4_SRGB_BLOCK8,

            FormatInfo(8, Vec3i(4, 4, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB_ETC_UNORM_BLOCK8,
            FormatInfo(8, Vec3i(4, 4, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB_ATC_UNORM_BLOCK8,
            FormatInfo(16, Vec3i(4, 4, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_ATCA_UNORM_BLOCK16,
            FormatInfo(16, Vec3i(4, 4, 1), 4, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_ATCI_UNORM_BLOCK16,

            FormatInfo(1, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_RED, SWIZZLE_RED, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_LUMINANCE_ALPHA_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_L8_UNORM_PACK8,
            FormatInfo(1, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_RED), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_LUMINANCE_ALPHA_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_A8_UNORM_PACK8,
            FormatInfo(2, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_RED, SWIZZLE_RED, SWIZZLE_GREEN), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_LUMINANCE_ALPHA_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_LA8_UNORM_PACK8,
            FormatInfo(2, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_RED, SWIZZLE_RED, SWIZZLE_RED, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_LUMINANCE_ALPHA_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_L16_UNORM_PACK16,
            FormatInfo(2, Vec3i(1, 1, 1), 1, Swizzles(SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_RED), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_LUMINANCE_ALPHA_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_A16_UNORM_PACK16,
            FormatInfo(4, Vec3i(1, 1, 1), 2, Swizzles(SWIZZLE_RED, SWIZZLE_RED, SWIZZLE_RED, SWIZZLE_GREEN), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_LUMINANCE_ALPHA_BIT or CAP_DDS_GLI_EXT_BIT), //FORMAT_LA16_UNORM_PACK16,

            FormatInfo(4, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_SWIZZLE_BIT), //FORMAT_BGR8_UNORM_PACK32,
            FormatInfo(4, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ONE), CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_SWIZZLE_BIT or CAP_COLORSPACE_SRGB_BIT), //FORMAT_BGR8_SRGB_PACK32,

            FormatInfo(1, Vec3i(1, 1, 1), 3, Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_PACKED8_BIT or CAP_NORMALIZED_BIT or CAP_UNSIGNED_BIT or CAP_DDS_GLI_EXT_BIT)                                        //FORMAT_RG3B2_UNORM_PACK8,
    )
    assert(t.size == FORMAT_COUNT, { System.err.println("GLI error: format descriptor list doesn't match number of supported formats") })
    t
}
